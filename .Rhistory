sort(taxa_sums(ps), decreasing = TRUE)
# let's plot a subset tree containing 10 most abundant OTUs
myTaxa <- sort(taxa_sums(ps), decreasing = TRUE)[1:10]
ex1 = prune_taxa(myTaxa, ps)
?prune_taxa
# let's plot a subset tree containing 10 most abundant OTUs
myTaxa <- sort(taxa_sums(ps), decreasing = TRUE)[1:10]
ex1 = prune_taxa(myTaxa, ps)
myTaxa
# let's plot a subset tree containing 10 most abundant OTUs
myTaxa <- names(sort(taxa_sums(ps), decreasing = TRUE)[1:10])
ex1 = prune_taxa(myTaxa, ps)
plot(phy_tree(ex1), show.node.label = TRUE)
# let's plot a subset tree containing 10 most abundant OTUs
# step1 : myTaxa is a list of OTU names
myTaxa <- names(sort(taxa_sums(ps), decreasing = TRUE)[1:10])
# step 2: cut these 10 OTUs out from the whole dataset
ex1 = prune_taxa(myTaxa, ps)
# step 3: plot just these 10 OTUs
plot(phy_tree(ex1), show.node.label = TRUE)
# not obvious! let's sort them
sort(taxa_sums(ps), decreasing = TRUE)[1:8]
# not obvious! let's sort them
sort(taxa_sums(ps), decreasing = TRUE)[1:10]
plot_tree(ex1, color = "SampleType", label.tips = "Phylum", ladderize = "left", justify = "left" , size = "Abundance")
plot_tree(ex1, color = "Treatment", label.tips = "Phylum", ladderize = "left", justify = "left" , size = "Abundance")
ps
taxa_names(ps)
ps
tax_table(ps)
tax_table(ps)[1:2]
plot_tree(ex1, color = "Treatment", label.tips = "Rank1", ladderize = "left", justify = "left" , size = "Abundance")
plot_tree(ex1, color = "Treatment", label.tips = "Rank4", ladderize = "left", justify = "left" , size = "Abundance")
plot_tree(ex1, color = "Treatment", label.tips = "Rank3", ladderize = "left", justify = "left" , size = "Abundance")
# now we plot the same tree with drug/placebo information
# Rank3 means at the bacterial Class level (Rank 2 would be phylum)
plot_tree(ex1, color = "Treatment", label.tips = "Rank3", ladderize = "left", justify = "left" , size = "Abundance")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
fr
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_tree(tax_glom("Rank3"), color = "Treatment", shape="Rank2",size="Abundance")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_tree(tax_glom(psr, "Rank3"), color = "Treatment", shape="Rank2",size="Abundance")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), color = "Treatment")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"))
?plot_bar
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3", facet_grid = "Treatment")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3", facet_grid = Treatment)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3", facet_grid = ~Treatment)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3")@data
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3")$data
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), fill = "Rank3", facet_grid = Treatment~.)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), x="Rank3", fill = "Rank3", facet_grid = Treatment~.)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), x="Rank3", fill = "Rank3", facet_grid = ~Treatment)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), x="Treatment", fill = "Rank3", facet_grid = ~Rank3)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank3"), x="Treatment", fill = "Rank3", facet_grid = ~Rank2)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), x="Treatment", fill = "Rank2", facet_grid = ~Rank2)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Rank2)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = Treatment~Rank2)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = Treatment~)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = Treatment~)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = Treatment~ )
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = Treatment~Rank2)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment, scale = "free_x")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
head(df, 1)
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
ggplot(df, aes(Sample, Abundance)) + geom_bar(stat = 'identity')
df
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance)) + geom_bar(stat = 'identity')
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance)) + geom_bar(stat = 'identity')
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance, color = Rank2)) + geom_bar(stat = 'identity')
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance, fill = Rank2)) + geom_bar(stat = 'identity')
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance, fill = Rank2)) +
geom_bar(stat = 'identity') +
facet_wrap(~Treatment, scales = "free_x")
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
# above graph okay but have ugly gaps!
# fix them now by using ggplot2
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance, fill = Rank2)) +
geom_bar(stat = 'identity') +
facet_wrap(~Treatment, scales = "free_x")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="taxa", color="Phylum", title="taxa")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="taxa", color="Rank2", title="taxa")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="Samples", color="Rank2", title="taxa")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="Samples", color="Rank2")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="Samples", color="Treatment")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="taxa", color="Treatment")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="Sample", color="Treatment")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="Samples", color="Treatment")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="samples", color="Treatment")
sample_names(ps)
sample_data(ps)
ps
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="taxa", color="Treatment")
# pca plots
pso <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, pso, type="taxa", color="Rank4")
# pca plots
pso <- ordinate(ps, "NMDS", "unifrac")
plot_ordination(ps, pso, type="taxa", color="Rank4")
# pca plots
pso <- ordinate(ps, "NMDS", "unifrac")
plot_ordination(ps, pso, type="samples", color="Rank4")
# pca plots
pso <- ordinate(ps, "NMDS", "unifrac")
plot_ordination(ps, pso, type="samples", color="Treatment")
# pca plots
pso <- ordinate(ps, "NMDS", "unifrac")
plot_ordination(ps, pso, type="samples")
# pca plots
pso <- ordinate(ps, "pcoa", "unifrac")
plot_ordination(ps, pso, type="samples")
?ordinate
# pca plots
pso <- ordinate(ps, "PCoA", "unifrac")
plot_ordination(ps, pso, type="samples")
# pca plots
pso <- ordinate(ps, "PCoA", "unifrac")
plot_ordination(ps, pso, type="samples", color = "Treatment")
# plot a heatmap
library(pheatmap) # may need install.packages('pheatmap')
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=F,
show_colnames=F,
treeheight_row=0,
#treeheight_col=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=F,
show_colnames=F,
treeheight_row=0,
#treeheight_col=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=F,
show_colnames=F,
treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=F,
show_colnames=F,
treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=FALSE,
show_colnames=TRUE,
treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=FALSE,
show_colnames=TRUE,
#treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=TRUE,
show_colnames=TRUE,
#treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=FALSE,
show_colnames=TRUE,
#treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
plot_net(ps, maxdist = 0.3, color = "Treatment", shape="Treatment")
plot_net(ps, maxdist = 0.1, color = "Treatment", shape="Treatment")
plot_net(ps, color = "Treatment", shape="Treatment")
plot_net(ps, color = "Treatment")
ig <- make_network(ps, max.dist=0.3)
plot_network(ig, ps, color="Treatment", line_weight=0.4, label=NULL)
ig <- make_network(ps)
plot_network(ig, ps, color="Treatment", line_weight=0.4, label=NULL)
# plot network
plot_net(ps, color = "Treatment")
# load libraries
library(phyloseq)
library(ggplot2)
# set plotting theme
theme_set(theme_bw())
# make sure you are in 'metag' folder
getwd()
# if not in 'metag' folder
# setwd("~/Desktop/metag")
# getting otu_table and tree files into a
# phyloseq object named ps
ps <- import_biom('out/json', treefilename = 'out/rep_set.tre')
# take a look at 'ps'
ps
# aha 76 otus in 6 samples - we knew this since Tuesday
# just to double-check the dimention of our otu_table
dim(otu_table(ps))
# take a look at data
head(otu_table(ps))
# 6 samples: S1 to S6
# 2 sample variables: Description and Treatment
sample_data(ps)
# plot alpha diversity
plot_richness(ps, x='Treatment' , measures = c('Observed','Fisher','Shannon'), color = 'Treatment')
# other valid measures are "Chao1", "ACE", "InvSimpson".
# these are ecological richness measures - google their meanings.
# now take a look at our rep_set.tre
phy_tree(ps)
# which OTUs are most abundant?
taxa_sums(ps)
# not obvious! let's sort them
sort(taxa_sums(ps), decreasing = TRUE)[1:10]
# let's plot a subset tree containing 10 most abundant OTUs
# step1 : myTaxa is a list of OTU names
myTaxa <- names(sort(taxa_sums(ps), decreasing = TRUE)[1:10])
# step 2: cut these 10 OTUs out from the whole dataset
ex1 = prune_taxa(myTaxa, ps)
# step 3: plot just these 10 OTUs
plot(phy_tree(ex1), show.node.label = TRUE)
# now we plot the same tree with drug/placebo information
# Rank3 means at the bacterial Class level (Rank 2 would be phylum)
plot_tree(ex1, color = "Treatment", label.tips = "Rank3", ladderize = "left", justify = "left" , size = "Abundance")
# what do we conclude? Verrucomicrobia appears to be more in drug group
# convert counts to relative abundance
psr  = transform_sample_counts(ps, function(x) x / sum(x) )
# filter out low abundance OTUs
fr = filter_taxa(psr, function(x) mean(x) > 1e-5, TRUE)
# plot bar
plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)
# above graph okay but have ugly gaps!
# fix them now by using ggplot2
df = plot_bar(tax_glom(psr, "Rank2"), fill = "Rank2", facet_grid = ~Treatment)$data
ggplot(df, aes(Sample, Abundance, fill = Rank2)) +
geom_bar(stat = 'identity') +
facet_wrap(~Treatment, scales = "free_x")
# this is publication-ready graphics!
# pca plots
pso <- ordinate(ps, "PCoA", "unifrac")
plot_ordination(ps, pso, type="samples", color = "Treatment")
# plot a heatmap
# may need install.packages('pheatmap')
if (!require(pheatmap)){
install.packages("pheatmap")
library(pheatmap)
}
EPS = 1E-10 # a tiny number
mat <- data.frame(log(otu_table(ps) + EPS, 2),
check.names = FALSE)
pheatmap(mat,
show_rownames=FALSE,
show_colnames=TRUE,
#treeheight_row=0,
annotation_col=data.frame(sample_data(ps)[, "Treatment"])
)
# we see three clusters in the heatmap
# it would be nice if we see two (drug, placebo)
# plot network
plot_net(ps, color = "Treatment")
